// Generated by Dagger (https://dagger.dev).
package com.net.pvr1;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.net.pvr1.api.UserAPI;
import com.net.pvr1.di.NetworkModule;
import com.net.pvr1.di.NetworkModule_ProvidesRetrofitFactory;
import com.net.pvr1.di.NetworkModule_ProvidesUserAPIFactory;
import com.net.pvr1.repository.UserRepository;
import com.net.pvr1.ui.bookingSession.BookingActivity;
import com.net.pvr1.ui.bookingSession.BookingActivity_MembersInjector;
import com.net.pvr1.ui.bookingSession.viewModel.BookingViewModel;
import com.net.pvr1.ui.bookingSession.viewModel.BookingViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.cinemaSession.CinemaSessionActivity;
import com.net.pvr1.ui.cinemaSession.viewModel.CinemaSessionViewModel;
import com.net.pvr1.ui.cinemaSession.viewModel.CinemaSessionViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.enableLocation.EnableLocationActivity;
import com.net.pvr1.ui.enableLocation.viewModel.EnableLocationViewModel;
import com.net.pvr1.ui.enableLocation.viewModel.EnableLocationViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.food.FoodActivity;
import com.net.pvr1.ui.food.FoodActivity_MembersInjector;
import com.net.pvr1.ui.food.viewModel.FoodViewModel;
import com.net.pvr1.ui.food.viewModel.FoodViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.giftCard.GiftCardActivity;
import com.net.pvr1.ui.giftCard.activateGiftCard.ActivateGiftCardActivity;
import com.net.pvr1.ui.giftCard.activateGiftCard.viewModel.ActivateGiftCardViewModel;
import com.net.pvr1.ui.giftCard.activateGiftCard.viewModel.ActivateGiftCardViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.giftCard.viewModel.GiftCardViewModel;
import com.net.pvr1.ui.giftCard.viewModel.GiftCardViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.home.HomeActivity;
import com.net.pvr1.ui.home.HomeActivity_MembersInjector;
import com.net.pvr1.ui.home.fragment.cinema.CinemasFragment;
import com.net.pvr1.ui.home.fragment.cinema.CinemasFragment_MembersInjector;
import com.net.pvr1.ui.home.fragment.cinema.viewModel.CinemaViewModel;
import com.net.pvr1.ui.home.fragment.cinema.viewModel.CinemaViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.home.fragment.commingSoon.viewModel.ComingSoonViewModel;
import com.net.pvr1.ui.home.fragment.commingSoon.viewModel.ComingSoonViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.home.fragment.home.viewModel.HomeViewModel;
import com.net.pvr1.ui.home.fragment.home.viewModel.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.home.fragment.more.MoreFragment;
import com.net.pvr1.ui.home.fragment.more.MoreFragment_MembersInjector;
import com.net.pvr1.ui.home.fragment.more.bookingRetrieval.BookingRetrievalActivity;
import com.net.pvr1.ui.home.fragment.more.bookingRetrieval.BookingRetrievalActivity_MembersInjector;
import com.net.pvr1.ui.home.fragment.more.bookingRetrieval.viewModel.BookingRetrievalViewModel;
import com.net.pvr1.ui.home.fragment.more.bookingRetrieval.viewModel.BookingRetrievalViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.home.fragment.privilege.PrivilegeFragment;
import com.net.pvr1.ui.home.fragment.privilege.PrivilegeFragment_MembersInjector;
import com.net.pvr1.ui.home.fragment.privilege.PrivilegeLogInActivity;
import com.net.pvr1.ui.home.fragment.privilege.PrivilegeLogInActivity_MembersInjector;
import com.net.pvr1.ui.home.fragment.privilege.viewModel.PrivilegeLoginViewModel;
import com.net.pvr1.ui.home.fragment.privilege.viewModel.PrivilegeLoginViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.login.LoginActivity;
import com.net.pvr1.ui.login.LoginActivity_MembersInjector;
import com.net.pvr1.ui.login.otpVerify.OtpVerifyActivity;
import com.net.pvr1.ui.login.otpVerify.OtpVerifyActivity_MembersInjector;
import com.net.pvr1.ui.login.otpVerify.viewModel.OtpVerifyViewModel;
import com.net.pvr1.ui.login.otpVerify.viewModel.OtpVerifyViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.login.viewModel.LoginViewModel;
import com.net.pvr1.ui.login.viewModel.LoginViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.movieDetails.commingSoon.ComingSoonActivity;
import com.net.pvr1.ui.movieDetails.commingSoon.ComingSoonActivity_MembersInjector;
import com.net.pvr1.ui.movieDetails.nowShowing.NowShowingActivity;
import com.net.pvr1.ui.movieDetails.nowShowing.viewModel.MovieDetailsViewModel;
import com.net.pvr1.ui.movieDetails.nowShowing.viewModel.MovieDetailsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.myBookings.MyBookingsActivity;
import com.net.pvr1.ui.myBookings.viewModel.MyBookingViewModel;
import com.net.pvr1.ui.myBookings.viewModel.MyBookingViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.offer.OfferActivity;
import com.net.pvr1.ui.offer.offerDetails.OfferDetailsActivity;
import com.net.pvr1.ui.offer.offerDetails.viewModel.OfferDetailsViewModel;
import com.net.pvr1.ui.offer.offerDetails.viewModel.OfferDetailsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.offer.viewModel.OfferViewModel;
import com.net.pvr1.ui.offer.viewModel.OfferViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.onBoarding.LandingActivity;
import com.net.pvr1.ui.onBoarding.LandingActivity_MembersInjector;
import com.net.pvr1.ui.payment.PaymentActivity;
import com.net.pvr1.ui.payment.viewModel.PaymentViewModel;
import com.net.pvr1.ui.payment.viewModel.PaymentViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.player.PlayerActivity;
import com.net.pvr1.ui.player.viewModel.PlayerViewModel;
import com.net.pvr1.ui.player.viewModel.PlayerViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.privateScreenings.PrivateScreeningsActivity;
import com.net.pvr1.ui.privateScreenings.viewModel.PrivateScreenViewModel;
import com.net.pvr1.ui.privateScreenings.viewModel.PrivateScreenViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.profile.prefrence.PreferenceActivity;
import com.net.pvr1.ui.profile.userDetails.ProfileActivity;
import com.net.pvr1.ui.profile.userDetails.viewModel.PreferenceViewModel;
import com.net.pvr1.ui.profile.userDetails.viewModel.PreferenceViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.profile.userDetails.viewModel.UserProfileViewModel;
import com.net.pvr1.ui.profile.userDetails.viewModel.UserProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.scanner.ScannerActivity;
import com.net.pvr1.ui.search.searchCinema.SearchCinemaActivity;
import com.net.pvr1.ui.search.searchCinema.viewModel.CinemaSearchViewModel;
import com.net.pvr1.ui.search.searchCinema.viewModel.CinemaSearchViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.search.searchComingSoon.SearchComingSoonActivity;
import com.net.pvr1.ui.search.searchComingSoon.viewModel.ComingSoonSearchViewModel;
import com.net.pvr1.ui.search.searchComingSoon.viewModel.ComingSoonSearchViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.search.searchHome.SearchHomeActivity;
import com.net.pvr1.ui.search.searchHome.viewModel.HomeSearchViewModel;
import com.net.pvr1.ui.search.searchHome.viewModel.HomeSearchViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.seatLayout.SeatLayoutActivity;
import com.net.pvr1.ui.seatLayout.viewModel.SeatLayoutViewModel;
import com.net.pvr1.ui.seatLayout.viewModel.SeatLayoutViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.selectCity.SelectCityActivity;
import com.net.pvr1.ui.selectCity.viewModel.SelectCityViewModel;
import com.net.pvr1.ui.selectCity.viewModel.SelectCityViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.splash.SplashActivity;
import com.net.pvr1.ui.splash.SplashActivity_MembersInjector;
import com.net.pvr1.ui.splash.viewModel.SplashViewModel;
import com.net.pvr1.ui.splash.viewModel.SplashViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.summery.SummeryActivity;
import com.net.pvr1.ui.summery.SummeryActivity_MembersInjector;
import com.net.pvr1.ui.summery.viewModel.SummeryViewModel;
import com.net.pvr1.ui.summery.viewModel.SummeryViewModel_HiltModules_KeyModule_ProvideFactory;
import com.net.pvr1.ui.webView.WebViewActivity;
import com.net.pvr1.utils.PreferenceManager;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerNoteApplication_HiltComponents_SingletonC {
  private DaggerNoteApplication_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private NetworkModule networkModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public NoteApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      return new SingletonCImpl(applicationContextModule, networkModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements NoteApplication_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public NoteApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements NoteApplication_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public NoteApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements NoteApplication_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public NoteApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements NoteApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public NoteApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements NoteApplication_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public NoteApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements NoteApplication_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public NoteApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements NoteApplication_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public NoteApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends NoteApplication_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends NoteApplication_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectCinemasFragment(CinemasFragment cinemasFragment) {
      injectCinemasFragment2(cinemasFragment);
    }

    @Override
    public void injectMoreFragment(MoreFragment moreFragment) {
      injectMoreFragment2(moreFragment);
    }

    @Override
    public void injectPrivilegeFragment(PrivilegeFragment privilegeFragment) {
      injectPrivilegeFragment2(privilegeFragment);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    private CinemasFragment injectCinemasFragment2(CinemasFragment instance) {
      CinemasFragment_MembersInjector.injectPreferences(instance, activityCImpl.preferenceManager());
      return instance;
    }

    private MoreFragment injectMoreFragment2(MoreFragment instance) {
      MoreFragment_MembersInjector.injectPreferences(instance, activityCImpl.preferenceManager());
      return instance;
    }

    private PrivilegeFragment injectPrivilegeFragment2(PrivilegeFragment instance) {
      PrivilegeFragment_MembersInjector.injectPreferences(instance, activityCImpl.preferenceManager());
      return instance;
    }
  }

  private static final class ViewCImpl extends NoteApplication_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends NoteApplication_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    private PreferenceManager preferenceManager() {
      return new PreferenceManager(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));
    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public void injectBookingActivity(BookingActivity bookingActivity) {
      injectBookingActivity2(bookingActivity);
    }

    @Override
    public void injectCinemaSessionActivity(CinemaSessionActivity cinemaSessionActivity) {
    }

    @Override
    public void injectEnableLocationActivity(EnableLocationActivity enableLocationActivity) {
    }

    @Override
    public void injectFoodActivity(FoodActivity foodActivity) {
      injectFoodActivity2(foodActivity);
    }

    @Override
    public void injectGiftCardActivity(GiftCardActivity giftCardActivity) {
    }

    @Override
    public void injectActivateGiftCardActivity(ActivateGiftCardActivity activateGiftCardActivity) {
    }

    @Override
    public void injectHomeActivity(HomeActivity homeActivity) {
      injectHomeActivity2(homeActivity);
    }

    @Override
    public void injectBookingRetrievalActivity(BookingRetrievalActivity bookingRetrievalActivity) {
      injectBookingRetrievalActivity2(bookingRetrievalActivity);
    }

    @Override
    public void injectPrivilegeLogInActivity(PrivilegeLogInActivity privilegeLogInActivity) {
      injectPrivilegeLogInActivity2(privilegeLogInActivity);
    }

    @Override
    public void injectLoginActivity(LoginActivity loginActivity) {
      injectLoginActivity2(loginActivity);
    }

    @Override
    public void injectOtpVerifyActivity(OtpVerifyActivity otpVerifyActivity) {
      injectOtpVerifyActivity2(otpVerifyActivity);
    }

    @Override
    public void injectComingSoonActivity(ComingSoonActivity comingSoonActivity) {
      injectComingSoonActivity2(comingSoonActivity);
    }

    @Override
    public void injectNowShowingActivity(NowShowingActivity nowShowingActivity) {
    }

    @Override
    public void injectMyBookingsActivity(MyBookingsActivity myBookingsActivity) {
    }

    @Override
    public void injectOfferActivity(OfferActivity offerActivity) {
    }

    @Override
    public void injectOfferDetailsActivity(OfferDetailsActivity offerDetailsActivity) {
    }

    @Override
    public void injectLandingActivity(LandingActivity landingActivity) {
      injectLandingActivity2(landingActivity);
    }

    @Override
    public void injectPaymentActivity(PaymentActivity paymentActivity) {
    }

    @Override
    public void injectPlayerActivity(PlayerActivity playerActivity) {
    }

    @Override
    public void injectPrivateScreeningsActivity(
        PrivateScreeningsActivity privateScreeningsActivity) {
    }

    @Override
    public void injectPreferenceActivity(PreferenceActivity preferenceActivity) {
    }

    @Override
    public void injectProfileActivity(ProfileActivity profileActivity) {
    }

    @Override
    public void injectScannerActivity(ScannerActivity scannerActivity) {
    }

    @Override
    public void injectSearchCinemaActivity(SearchCinemaActivity searchCinemaActivity) {
    }

    @Override
    public void injectSearchComingSoonActivity(SearchComingSoonActivity searchComingSoonActivity) {
    }

    @Override
    public void injectSearchHomeActivity(SearchHomeActivity searchHomeActivity) {
    }

    @Override
    public void injectSeatLayoutActivity(SeatLayoutActivity seatLayoutActivity) {
    }

    @Override
    public void injectSelectCityActivity(SelectCityActivity selectCityActivity) {
    }

    @Override
    public void injectSplashActivity(SplashActivity splashActivity) {
      injectSplashActivity2(splashActivity);
    }

    @Override
    public void injectSummeryActivity(SummeryActivity summeryActivity) {
      injectSummeryActivity2(summeryActivity);
    }

    @Override
    public void injectWebViewActivity(WebViewActivity webViewActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(30).add(ActivateGiftCardViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(BookingRetrievalViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(BookingViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(CinemaSearchViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(CinemaSessionViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(CinemaViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ComingSoonSearchViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ComingSoonViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(EnableLocationViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(FoodViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(GiftCardViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(HomeSearchViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(com.net.pvr1.ui.home.viewModel.HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(LoginViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MovieDetailsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MyBookingViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(OfferDetailsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(OfferViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(OtpVerifyViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PaymentViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PlayerViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PreferenceViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PrivateScreenViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PrivilegeLoginViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SeatLayoutViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SelectCityViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SplashViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SummeryViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(UserProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    private BookingActivity injectBookingActivity2(BookingActivity instance) {
      BookingActivity_MembersInjector.injectPreferences(instance, preferenceManager());
      return instance;
    }

    private FoodActivity injectFoodActivity2(FoodActivity instance) {
      FoodActivity_MembersInjector.injectPreferences(instance, preferenceManager());
      return instance;
    }

    private HomeActivity injectHomeActivity2(HomeActivity instance) {
      HomeActivity_MembersInjector.injectPreferences(instance, preferenceManager());
      return instance;
    }

    private BookingRetrievalActivity injectBookingRetrievalActivity2(
        BookingRetrievalActivity instance) {
      BookingRetrievalActivity_MembersInjector.injectPreferences(instance, preferenceManager());
      return instance;
    }

    private PrivilegeLogInActivity injectPrivilegeLogInActivity2(PrivilegeLogInActivity instance) {
      PrivilegeLogInActivity_MembersInjector.injectPreferences(instance, preferenceManager());
      return instance;
    }

    private LoginActivity injectLoginActivity2(LoginActivity instance) {
      LoginActivity_MembersInjector.injectPreferences(instance, preferenceManager());
      return instance;
    }

    private OtpVerifyActivity injectOtpVerifyActivity2(OtpVerifyActivity instance) {
      OtpVerifyActivity_MembersInjector.injectPreferences(instance, preferenceManager());
      return instance;
    }

    private ComingSoonActivity injectComingSoonActivity2(ComingSoonActivity instance) {
      ComingSoonActivity_MembersInjector.injectPreferences(instance, preferenceManager());
      return instance;
    }

    private LandingActivity injectLandingActivity2(LandingActivity instance) {
      LandingActivity_MembersInjector.injectPreferences(instance, preferenceManager());
      return instance;
    }

    private SplashActivity injectSplashActivity2(SplashActivity instance) {
      SplashActivity_MembersInjector.injectPreferences(instance, preferenceManager());
      return instance;
    }

    private SummeryActivity injectSummeryActivity2(SummeryActivity instance) {
      SummeryActivity_MembersInjector.injectPreferences(instance, preferenceManager());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends NoteApplication_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<ActivateGiftCardViewModel> activateGiftCardViewModelProvider;

    private Provider<BookingRetrievalViewModel> bookingRetrievalViewModelProvider;

    private Provider<BookingViewModel> bookingViewModelProvider;

    private Provider<CinemaSearchViewModel> cinemaSearchViewModelProvider;

    private Provider<CinemaSessionViewModel> cinemaSessionViewModelProvider;

    private Provider<CinemaViewModel> cinemaViewModelProvider;

    private Provider<ComingSoonSearchViewModel> comingSoonSearchViewModelProvider;

    private Provider<ComingSoonViewModel> comingSoonViewModelProvider;

    private Provider<EnableLocationViewModel> enableLocationViewModelProvider;

    private Provider<FoodViewModel> foodViewModelProvider;

    private Provider<GiftCardViewModel> giftCardViewModelProvider;

    private Provider<HomeSearchViewModel> homeSearchViewModelProvider;

    private Provider<HomeViewModel> homeViewModelProvider;

    private Provider<com.net.pvr1.ui.home.viewModel.HomeViewModel> homeViewModelProvider2;

    private Provider<LoginViewModel> loginViewModelProvider;

    private Provider<MovieDetailsViewModel> movieDetailsViewModelProvider;

    private Provider<MyBookingViewModel> myBookingViewModelProvider;

    private Provider<OfferDetailsViewModel> offerDetailsViewModelProvider;

    private Provider<OfferViewModel> offerViewModelProvider;

    private Provider<OtpVerifyViewModel> otpVerifyViewModelProvider;

    private Provider<PaymentViewModel> paymentViewModelProvider;

    private Provider<PlayerViewModel> playerViewModelProvider;

    private Provider<PreferenceViewModel> preferenceViewModelProvider;

    private Provider<PrivateScreenViewModel> privateScreenViewModelProvider;

    private Provider<PrivilegeLoginViewModel> privilegeLoginViewModelProvider;

    private Provider<SeatLayoutViewModel> seatLayoutViewModelProvider;

    private Provider<SelectCityViewModel> selectCityViewModelProvider;

    private Provider<SplashViewModel> splashViewModelProvider;

    private Provider<SummeryViewModel> summeryViewModelProvider;

    private Provider<UserProfileViewModel> userProfileViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private UserRepository userRepository() {
      return new UserRepository(singletonCImpl.providesUserAPIProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.activateGiftCardViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.bookingRetrievalViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.bookingViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.cinemaSearchViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.cinemaSessionViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.cinemaViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
      this.comingSoonSearchViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6);
      this.comingSoonViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7);
      this.enableLocationViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 8);
      this.foodViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 9);
      this.giftCardViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 10);
      this.homeSearchViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 11);
      this.homeViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 12);
      this.homeViewModelProvider2 = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 13);
      this.loginViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 14);
      this.movieDetailsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 15);
      this.myBookingViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 16);
      this.offerDetailsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 17);
      this.offerViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 18);
      this.otpVerifyViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 19);
      this.paymentViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 20);
      this.playerViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 21);
      this.preferenceViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 22);
      this.privateScreenViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 23);
      this.privilegeLoginViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 24);
      this.seatLayoutViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 25);
      this.selectCityViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 26);
      this.splashViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 27);
      this.summeryViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 28);
      this.userProfileViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 29);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(30).put("com.net.pvr1.ui.giftCard.activateGiftCard.viewModel.ActivateGiftCardViewModel", ((Provider) activateGiftCardViewModelProvider)).put("com.net.pvr1.ui.home.fragment.more.bookingRetrieval.viewModel.BookingRetrievalViewModel", ((Provider) bookingRetrievalViewModelProvider)).put("com.net.pvr1.ui.bookingSession.viewModel.BookingViewModel", ((Provider) bookingViewModelProvider)).put("com.net.pvr1.ui.search.searchCinema.viewModel.CinemaSearchViewModel", ((Provider) cinemaSearchViewModelProvider)).put("com.net.pvr1.ui.cinemaSession.viewModel.CinemaSessionViewModel", ((Provider) cinemaSessionViewModelProvider)).put("com.net.pvr1.ui.home.fragment.cinema.viewModel.CinemaViewModel", ((Provider) cinemaViewModelProvider)).put("com.net.pvr1.ui.search.searchComingSoon.viewModel.ComingSoonSearchViewModel", ((Provider) comingSoonSearchViewModelProvider)).put("com.net.pvr1.ui.home.fragment.commingSoon.viewModel.ComingSoonViewModel", ((Provider) comingSoonViewModelProvider)).put("com.net.pvr1.ui.enableLocation.viewModel.EnableLocationViewModel", ((Provider) enableLocationViewModelProvider)).put("com.net.pvr1.ui.food.viewModel.FoodViewModel", ((Provider) foodViewModelProvider)).put("com.net.pvr1.ui.giftCard.viewModel.GiftCardViewModel", ((Provider) giftCardViewModelProvider)).put("com.net.pvr1.ui.search.searchHome.viewModel.HomeSearchViewModel", ((Provider) homeSearchViewModelProvider)).put("com.net.pvr1.ui.home.fragment.home.viewModel.HomeViewModel", ((Provider) homeViewModelProvider)).put("com.net.pvr1.ui.home.viewModel.HomeViewModel", ((Provider) homeViewModelProvider2)).put("com.net.pvr1.ui.login.viewModel.LoginViewModel", ((Provider) loginViewModelProvider)).put("com.net.pvr1.ui.movieDetails.nowShowing.viewModel.MovieDetailsViewModel", ((Provider) movieDetailsViewModelProvider)).put("com.net.pvr1.ui.myBookings.viewModel.MyBookingViewModel", ((Provider) myBookingViewModelProvider)).put("com.net.pvr1.ui.offer.offerDetails.viewModel.OfferDetailsViewModel", ((Provider) offerDetailsViewModelProvider)).put("com.net.pvr1.ui.offer.viewModel.OfferViewModel", ((Provider) offerViewModelProvider)).put("com.net.pvr1.ui.login.otpVerify.viewModel.OtpVerifyViewModel", ((Provider) otpVerifyViewModelProvider)).put("com.net.pvr1.ui.payment.viewModel.PaymentViewModel", ((Provider) paymentViewModelProvider)).put("com.net.pvr1.ui.player.viewModel.PlayerViewModel", ((Provider) playerViewModelProvider)).put("com.net.pvr1.ui.profile.userDetails.viewModel.PreferenceViewModel", ((Provider) preferenceViewModelProvider)).put("com.net.pvr1.ui.privateScreenings.viewModel.PrivateScreenViewModel", ((Provider) privateScreenViewModelProvider)).put("com.net.pvr1.ui.home.fragment.privilege.viewModel.PrivilegeLoginViewModel", ((Provider) privilegeLoginViewModelProvider)).put("com.net.pvr1.ui.seatLayout.viewModel.SeatLayoutViewModel", ((Provider) seatLayoutViewModelProvider)).put("com.net.pvr1.ui.selectCity.viewModel.SelectCityViewModel", ((Provider) selectCityViewModelProvider)).put("com.net.pvr1.ui.splash.viewModel.SplashViewModel", ((Provider) splashViewModelProvider)).put("com.net.pvr1.ui.summery.viewModel.SummeryViewModel", ((Provider) summeryViewModelProvider)).put("com.net.pvr1.ui.profile.userDetails.viewModel.UserProfileViewModel", ((Provider) userProfileViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.net.pvr1.ui.giftCard.activateGiftCard.viewModel.ActivateGiftCardViewModel 
          return (T) new ActivateGiftCardViewModel(viewModelCImpl.userRepository());

          case 1: // com.net.pvr1.ui.home.fragment.more.bookingRetrieval.viewModel.BookingRetrievalViewModel 
          return (T) new BookingRetrievalViewModel(viewModelCImpl.userRepository());

          case 2: // com.net.pvr1.ui.bookingSession.viewModel.BookingViewModel 
          return (T) new BookingViewModel(viewModelCImpl.userRepository());

          case 3: // com.net.pvr1.ui.search.searchCinema.viewModel.CinemaSearchViewModel 
          return (T) new CinemaSearchViewModel(viewModelCImpl.userRepository());

          case 4: // com.net.pvr1.ui.cinemaSession.viewModel.CinemaSessionViewModel 
          return (T) new CinemaSessionViewModel(viewModelCImpl.userRepository());

          case 5: // com.net.pvr1.ui.home.fragment.cinema.viewModel.CinemaViewModel 
          return (T) new CinemaViewModel(viewModelCImpl.userRepository());

          case 6: // com.net.pvr1.ui.search.searchComingSoon.viewModel.ComingSoonSearchViewModel 
          return (T) new ComingSoonSearchViewModel(viewModelCImpl.userRepository());

          case 7: // com.net.pvr1.ui.home.fragment.commingSoon.viewModel.ComingSoonViewModel 
          return (T) new ComingSoonViewModel(viewModelCImpl.userRepository());

          case 8: // com.net.pvr1.ui.enableLocation.viewModel.EnableLocationViewModel 
          return (T) new EnableLocationViewModel(viewModelCImpl.userRepository());

          case 9: // com.net.pvr1.ui.food.viewModel.FoodViewModel 
          return (T) new FoodViewModel(viewModelCImpl.userRepository());

          case 10: // com.net.pvr1.ui.giftCard.viewModel.GiftCardViewModel 
          return (T) new GiftCardViewModel(viewModelCImpl.userRepository());

          case 11: // com.net.pvr1.ui.search.searchHome.viewModel.HomeSearchViewModel 
          return (T) new HomeSearchViewModel(viewModelCImpl.userRepository());

          case 12: // com.net.pvr1.ui.home.fragment.home.viewModel.HomeViewModel 
          return (T) new HomeViewModel(viewModelCImpl.userRepository());

          case 13: // com.net.pvr1.ui.home.viewModel.HomeViewModel 
          return (T) new com.net.pvr1.ui.home.viewModel.HomeViewModel(viewModelCImpl.userRepository());

          case 14: // com.net.pvr1.ui.login.viewModel.LoginViewModel 
          return (T) new LoginViewModel(viewModelCImpl.userRepository());

          case 15: // com.net.pvr1.ui.movieDetails.nowShowing.viewModel.MovieDetailsViewModel 
          return (T) new MovieDetailsViewModel(viewModelCImpl.userRepository());

          case 16: // com.net.pvr1.ui.myBookings.viewModel.MyBookingViewModel 
          return (T) new MyBookingViewModel(viewModelCImpl.userRepository());

          case 17: // com.net.pvr1.ui.offer.offerDetails.viewModel.OfferDetailsViewModel 
          return (T) new OfferDetailsViewModel(viewModelCImpl.userRepository());

          case 18: // com.net.pvr1.ui.offer.viewModel.OfferViewModel 
          return (T) new OfferViewModel(viewModelCImpl.userRepository());

          case 19: // com.net.pvr1.ui.login.otpVerify.viewModel.OtpVerifyViewModel 
          return (T) new OtpVerifyViewModel(viewModelCImpl.userRepository());

          case 20: // com.net.pvr1.ui.payment.viewModel.PaymentViewModel 
          return (T) new PaymentViewModel(viewModelCImpl.userRepository());

          case 21: // com.net.pvr1.ui.player.viewModel.PlayerViewModel 
          return (T) new PlayerViewModel(viewModelCImpl.userRepository());

          case 22: // com.net.pvr1.ui.profile.userDetails.viewModel.PreferenceViewModel 
          return (T) new PreferenceViewModel(viewModelCImpl.userRepository());

          case 23: // com.net.pvr1.ui.privateScreenings.viewModel.PrivateScreenViewModel 
          return (T) new PrivateScreenViewModel(viewModelCImpl.userRepository());

          case 24: // com.net.pvr1.ui.home.fragment.privilege.viewModel.PrivilegeLoginViewModel 
          return (T) new PrivilegeLoginViewModel(viewModelCImpl.userRepository());

          case 25: // com.net.pvr1.ui.seatLayout.viewModel.SeatLayoutViewModel 
          return (T) new SeatLayoutViewModel(viewModelCImpl.userRepository());

          case 26: // com.net.pvr1.ui.selectCity.viewModel.SelectCityViewModel 
          return (T) new SelectCityViewModel(viewModelCImpl.userRepository());

          case 27: // com.net.pvr1.ui.splash.viewModel.SplashViewModel 
          return (T) new SplashViewModel(viewModelCImpl.userRepository());

          case 28: // com.net.pvr1.ui.summery.viewModel.SummeryViewModel 
          return (T) new SummeryViewModel(viewModelCImpl.userRepository());

          case 29: // com.net.pvr1.ui.profile.userDetails.viewModel.UserProfileViewModel 
          return (T) new UserProfileViewModel(viewModelCImpl.userRepository());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends NoteApplication_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends NoteApplication_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends NoteApplication_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final NetworkModule networkModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<retrofit2.Retrofit.Builder> providesRetrofitProvider;

    private Provider<UserAPI> providesUserAPIProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam,
        NetworkModule networkModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      this.networkModule = networkModuleParam;
      initialize(applicationContextModuleParam, networkModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam,
        final NetworkModule networkModuleParam) {
      this.providesRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<retrofit2.Retrofit.Builder>(singletonCImpl, 1));
      this.providesUserAPIProvider = DoubleCheck.provider(new SwitchingProvider<UserAPI>(singletonCImpl, 0));
    }

    @Override
    public void injectNoteApplication(NoteApplication noteApplication) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.net.pvr1.api.UserAPI 
          return (T) NetworkModule_ProvidesUserAPIFactory.providesUserAPI(singletonCImpl.networkModule, singletonCImpl.providesRetrofitProvider.get());

          case 1: // retrofit2.Retrofit.Builder 
          return (T) NetworkModule_ProvidesRetrofitFactory.providesRetrofit(singletonCImpl.networkModule);

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
