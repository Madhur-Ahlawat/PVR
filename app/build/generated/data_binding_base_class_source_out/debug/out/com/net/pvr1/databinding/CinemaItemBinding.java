// Generated by view binder compiler. Do not edit!
package com.net.pvr1.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.net.pvr1.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CinemaItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final View View;

  @NonNull
  public final LinearLayout bottomView;

  @NonNull
  public final ImageView cbFav;

  @NonNull
  public final ImageView cinemaImg;

  @NonNull
  public final TextView cinemaLocation;

  @NonNull
  public final TextView cinemaName;

  @NonNull
  public final LinearLayout food;

  @NonNull
  public final ImageView ivLocation;

  @NonNull
  public final LinearLayout kiloMeter;

  @NonNull
  public final LinearLayout llLocation;

  @NonNull
  public final ConstraintLayout llMain;

  @NonNull
  public final LinearLayout llMovie;

  @NonNull
  public final RecyclerView llMovieList;

  @NonNull
  public final LinearLayout metro;

  @NonNull
  public final TextView movieFirst;

  @NonNull
  public final TextView movieNext;

  @NonNull
  public final TextView movieSecond;

  @NonNull
  public final TextView movieThird;

  @NonNull
  public final TextView multipleCinema;

  @NonNull
  public final LinearLayout parking;

  @NonNull
  public final ConstraintLayout relativeLayout2;

  @NonNull
  public final TextView secDots;

  @NonNull
  public final LinearLayout shows;

  @NonNull
  public final TextView thirdDots;

  @NonNull
  public final ConstraintLayout topView;

  @NonNull
  public final TextView tvDistance;

  @NonNull
  public final TextView tvShows;

  @NonNull
  public final LinearLayout types;

  private CinemaItemBinding(@NonNull ConstraintLayout rootView, @NonNull View View,
      @NonNull LinearLayout bottomView, @NonNull ImageView cbFav, @NonNull ImageView cinemaImg,
      @NonNull TextView cinemaLocation, @NonNull TextView cinemaName, @NonNull LinearLayout food,
      @NonNull ImageView ivLocation, @NonNull LinearLayout kiloMeter,
      @NonNull LinearLayout llLocation, @NonNull ConstraintLayout llMain,
      @NonNull LinearLayout llMovie, @NonNull RecyclerView llMovieList, @NonNull LinearLayout metro,
      @NonNull TextView movieFirst, @NonNull TextView movieNext, @NonNull TextView movieSecond,
      @NonNull TextView movieThird, @NonNull TextView multipleCinema, @NonNull LinearLayout parking,
      @NonNull ConstraintLayout relativeLayout2, @NonNull TextView secDots,
      @NonNull LinearLayout shows, @NonNull TextView thirdDots, @NonNull ConstraintLayout topView,
      @NonNull TextView tvDistance, @NonNull TextView tvShows, @NonNull LinearLayout types) {
    this.rootView = rootView;
    this.View = View;
    this.bottomView = bottomView;
    this.cbFav = cbFav;
    this.cinemaImg = cinemaImg;
    this.cinemaLocation = cinemaLocation;
    this.cinemaName = cinemaName;
    this.food = food;
    this.ivLocation = ivLocation;
    this.kiloMeter = kiloMeter;
    this.llLocation = llLocation;
    this.llMain = llMain;
    this.llMovie = llMovie;
    this.llMovieList = llMovieList;
    this.metro = metro;
    this.movieFirst = movieFirst;
    this.movieNext = movieNext;
    this.movieSecond = movieSecond;
    this.movieThird = movieThird;
    this.multipleCinema = multipleCinema;
    this.parking = parking;
    this.relativeLayout2 = relativeLayout2;
    this.secDots = secDots;
    this.shows = shows;
    this.thirdDots = thirdDots;
    this.topView = topView;
    this.tvDistance = tvDistance;
    this.tvShows = tvShows;
    this.types = types;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CinemaItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CinemaItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.cinema_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CinemaItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.View_;
      View View = ViewBindings.findChildViewById(rootView, id);
      if (View == null) {
        break missingId;
      }

      id = R.id.bottomView;
      LinearLayout bottomView = ViewBindings.findChildViewById(rootView, id);
      if (bottomView == null) {
        break missingId;
      }

      id = R.id.cbFav;
      ImageView cbFav = ViewBindings.findChildViewById(rootView, id);
      if (cbFav == null) {
        break missingId;
      }

      id = R.id.cinemaImg;
      ImageView cinemaImg = ViewBindings.findChildViewById(rootView, id);
      if (cinemaImg == null) {
        break missingId;
      }

      id = R.id.cinemaLocation;
      TextView cinemaLocation = ViewBindings.findChildViewById(rootView, id);
      if (cinemaLocation == null) {
        break missingId;
      }

      id = R.id.cinemaName;
      TextView cinemaName = ViewBindings.findChildViewById(rootView, id);
      if (cinemaName == null) {
        break missingId;
      }

      id = R.id.food;
      LinearLayout food = ViewBindings.findChildViewById(rootView, id);
      if (food == null) {
        break missingId;
      }

      id = R.id.ivLocation;
      ImageView ivLocation = ViewBindings.findChildViewById(rootView, id);
      if (ivLocation == null) {
        break missingId;
      }

      id = R.id.kiloMeter;
      LinearLayout kiloMeter = ViewBindings.findChildViewById(rootView, id);
      if (kiloMeter == null) {
        break missingId;
      }

      id = R.id.llLocation;
      LinearLayout llLocation = ViewBindings.findChildViewById(rootView, id);
      if (llLocation == null) {
        break missingId;
      }

      id = R.id.llMain;
      ConstraintLayout llMain = ViewBindings.findChildViewById(rootView, id);
      if (llMain == null) {
        break missingId;
      }

      id = R.id.llMovie;
      LinearLayout llMovie = ViewBindings.findChildViewById(rootView, id);
      if (llMovie == null) {
        break missingId;
      }

      id = R.id.llMovieList;
      RecyclerView llMovieList = ViewBindings.findChildViewById(rootView, id);
      if (llMovieList == null) {
        break missingId;
      }

      id = R.id.metro;
      LinearLayout metro = ViewBindings.findChildViewById(rootView, id);
      if (metro == null) {
        break missingId;
      }

      id = R.id.movieFirst;
      TextView movieFirst = ViewBindings.findChildViewById(rootView, id);
      if (movieFirst == null) {
        break missingId;
      }

      id = R.id.movieNext;
      TextView movieNext = ViewBindings.findChildViewById(rootView, id);
      if (movieNext == null) {
        break missingId;
      }

      id = R.id.movieSecond;
      TextView movieSecond = ViewBindings.findChildViewById(rootView, id);
      if (movieSecond == null) {
        break missingId;
      }

      id = R.id.movieThird;
      TextView movieThird = ViewBindings.findChildViewById(rootView, id);
      if (movieThird == null) {
        break missingId;
      }

      id = R.id.multipleCinema;
      TextView multipleCinema = ViewBindings.findChildViewById(rootView, id);
      if (multipleCinema == null) {
        break missingId;
      }

      id = R.id.parking;
      LinearLayout parking = ViewBindings.findChildViewById(rootView, id);
      if (parking == null) {
        break missingId;
      }

      id = R.id.relativeLayout2;
      ConstraintLayout relativeLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayout2 == null) {
        break missingId;
      }

      id = R.id.secDots;
      TextView secDots = ViewBindings.findChildViewById(rootView, id);
      if (secDots == null) {
        break missingId;
      }

      id = R.id.shows;
      LinearLayout shows = ViewBindings.findChildViewById(rootView, id);
      if (shows == null) {
        break missingId;
      }

      id = R.id.thirdDots;
      TextView thirdDots = ViewBindings.findChildViewById(rootView, id);
      if (thirdDots == null) {
        break missingId;
      }

      id = R.id.topView;
      ConstraintLayout topView = ViewBindings.findChildViewById(rootView, id);
      if (topView == null) {
        break missingId;
      }

      id = R.id.tvDistance;
      TextView tvDistance = ViewBindings.findChildViewById(rootView, id);
      if (tvDistance == null) {
        break missingId;
      }

      id = R.id.tvShows;
      TextView tvShows = ViewBindings.findChildViewById(rootView, id);
      if (tvShows == null) {
        break missingId;
      }

      id = R.id.types;
      LinearLayout types = ViewBindings.findChildViewById(rootView, id);
      if (types == null) {
        break missingId;
      }

      return new CinemaItemBinding((ConstraintLayout) rootView, View, bottomView, cbFav, cinemaImg,
          cinemaLocation, cinemaName, food, ivLocation, kiloMeter, llLocation, llMain, llMovie,
          llMovieList, metro, movieFirst, movieNext, movieSecond, movieThird, multipleCinema,
          parking, relativeLayout2, secDots, shows, thirdDots, topView, tvDistance, tvShows, types);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
