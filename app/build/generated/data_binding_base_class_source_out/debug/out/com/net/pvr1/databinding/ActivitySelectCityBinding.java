// Generated by view binder compiler. Do not edit!
package com.net.pvr1.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.net.pvr1.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySelectCityBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout consSelectCity;

  @NonNull
  public final ConstraintLayout consSelectedLocation;

  @NonNull
  public final TextView headerTittle;

  @NonNull
  public final RecyclerView recyclerCity;

  @NonNull
  public final RecyclerView recyclerViewOtherCity;

  @NonNull
  public final RecyclerView recyclerViewSearchCity;

  @NonNull
  public final TextInputEditText searchCity;

  @NonNull
  public final TextInputLayout searchSelectCity;

  @NonNull
  public final TextView txtOtherCity;

  @NonNull
  public final TextView txtSelectedCity;

  @NonNull
  public final TextView txtSelectedLocation;

  @NonNull
  public final View vwL;

  @NonNull
  public final View vwMain;

  @NonNull
  public final View vwS;

  private ActivitySelectCityBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout consSelectCity, @NonNull ConstraintLayout consSelectedLocation,
      @NonNull TextView headerTittle, @NonNull RecyclerView recyclerCity,
      @NonNull RecyclerView recyclerViewOtherCity, @NonNull RecyclerView recyclerViewSearchCity,
      @NonNull TextInputEditText searchCity, @NonNull TextInputLayout searchSelectCity,
      @NonNull TextView txtOtherCity, @NonNull TextView txtSelectedCity,
      @NonNull TextView txtSelectedLocation, @NonNull View vwL, @NonNull View vwMain,
      @NonNull View vwS) {
    this.rootView = rootView;
    this.consSelectCity = consSelectCity;
    this.consSelectedLocation = consSelectedLocation;
    this.headerTittle = headerTittle;
    this.recyclerCity = recyclerCity;
    this.recyclerViewOtherCity = recyclerViewOtherCity;
    this.recyclerViewSearchCity = recyclerViewSearchCity;
    this.searchCity = searchCity;
    this.searchSelectCity = searchSelectCity;
    this.txtOtherCity = txtOtherCity;
    this.txtSelectedCity = txtSelectedCity;
    this.txtSelectedLocation = txtSelectedLocation;
    this.vwL = vwL;
    this.vwMain = vwMain;
    this.vwS = vwS;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySelectCityBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySelectCityBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_select_city, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySelectCityBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.consSelectCity;
      ConstraintLayout consSelectCity = ViewBindings.findChildViewById(rootView, id);
      if (consSelectCity == null) {
        break missingId;
      }

      id = R.id.consSelectedLocation;
      ConstraintLayout consSelectedLocation = ViewBindings.findChildViewById(rootView, id);
      if (consSelectedLocation == null) {
        break missingId;
      }

      id = R.id.headerTittle;
      TextView headerTittle = ViewBindings.findChildViewById(rootView, id);
      if (headerTittle == null) {
        break missingId;
      }

      id = R.id.recyclerCity;
      RecyclerView recyclerCity = ViewBindings.findChildViewById(rootView, id);
      if (recyclerCity == null) {
        break missingId;
      }

      id = R.id.recyclerViewOtherCity;
      RecyclerView recyclerViewOtherCity = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewOtherCity == null) {
        break missingId;
      }

      id = R.id.recyclerViewSearchCity;
      RecyclerView recyclerViewSearchCity = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewSearchCity == null) {
        break missingId;
      }

      id = R.id.searchCity;
      TextInputEditText searchCity = ViewBindings.findChildViewById(rootView, id);
      if (searchCity == null) {
        break missingId;
      }

      id = R.id.searchSelectCity;
      TextInputLayout searchSelectCity = ViewBindings.findChildViewById(rootView, id);
      if (searchSelectCity == null) {
        break missingId;
      }

      id = R.id.txtOtherCity;
      TextView txtOtherCity = ViewBindings.findChildViewById(rootView, id);
      if (txtOtherCity == null) {
        break missingId;
      }

      id = R.id.txtSelectedCity;
      TextView txtSelectedCity = ViewBindings.findChildViewById(rootView, id);
      if (txtSelectedCity == null) {
        break missingId;
      }

      id = R.id.txtSelectedLocation;
      TextView txtSelectedLocation = ViewBindings.findChildViewById(rootView, id);
      if (txtSelectedLocation == null) {
        break missingId;
      }

      id = R.id.vwL;
      View vwL = ViewBindings.findChildViewById(rootView, id);
      if (vwL == null) {
        break missingId;
      }

      id = R.id.vwMain;
      View vwMain = ViewBindings.findChildViewById(rootView, id);
      if (vwMain == null) {
        break missingId;
      }

      id = R.id.vwS;
      View vwS = ViewBindings.findChildViewById(rootView, id);
      if (vwS == null) {
        break missingId;
      }

      return new ActivitySelectCityBinding((ConstraintLayout) rootView, consSelectCity,
          consSelectedLocation, headerTittle, recyclerCity, recyclerViewOtherCity,
          recyclerViewSearchCity, searchCity, searchSelectCity, txtOtherCity, txtSelectedCity,
          txtSelectedLocation, vwL, vwMain, vwS);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
