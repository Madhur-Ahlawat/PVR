// Generated by view binder compiler. Do not edit!
package com.net.pvr1.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.net.pvr1.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ExperienceTypeItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout constraintLayout50;

  @NonNull
  public final ImageView imageView88;

  @NonNull
  public final ImageView imageView89;

  @NonNull
  public final TextView textView181;

  @NonNull
  public final View view121;

  private ExperienceTypeItemBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout constraintLayout50, @NonNull ImageView imageView88,
      @NonNull ImageView imageView89, @NonNull TextView textView181, @NonNull View view121) {
    this.rootView = rootView;
    this.constraintLayout50 = constraintLayout50;
    this.imageView88 = imageView88;
    this.imageView89 = imageView89;
    this.textView181 = textView181;
    this.view121 = view121;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ExperienceTypeItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ExperienceTypeItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.experience_type_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ExperienceTypeItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.constraintLayout50;
      ConstraintLayout constraintLayout50 = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayout50 == null) {
        break missingId;
      }

      id = R.id.imageView88;
      ImageView imageView88 = ViewBindings.findChildViewById(rootView, id);
      if (imageView88 == null) {
        break missingId;
      }

      id = R.id.imageView89;
      ImageView imageView89 = ViewBindings.findChildViewById(rootView, id);
      if (imageView89 == null) {
        break missingId;
      }

      id = R.id.textView181;
      TextView textView181 = ViewBindings.findChildViewById(rootView, id);
      if (textView181 == null) {
        break missingId;
      }

      id = R.id.view121;
      View view121 = ViewBindings.findChildViewById(rootView, id);
      if (view121 == null) {
        break missingId;
      }

      return new ExperienceTypeItemBinding((ConstraintLayout) rootView, constraintLayout50,
          imageView88, imageView89, textView181, view121);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
